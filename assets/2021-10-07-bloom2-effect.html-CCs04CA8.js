import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o as e}from"./app-CQ2TP62M.js";const n="/Blog/assets/202110/bloom2.png",l={};function h(p,s){return e(),a("div",null,s[0]||(s[0]=[t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>之前做过一次 bloom 辉光特效, 这次国庆节把整个后处理框架调整了一下, 更容易添加后处理效果.</p><h2 id="效果与思路" tabindex="-1"><a class="header-anchor" href="#效果与思路"><span>效果与思路</span></a></h2><p>先上效果图</p><figure><img src="'+n+`" alt="Bloom" tabindex="0" loading="lazy"><figcaption>Bloom</figcaption></figure><p>bloom 的实现就不说了, 上篇文章说过了, 这次说下这个后处理框架吧.<br> 整个后处理的核心就是对渲染管线的调整.添加自定义的 stage . 我提供了一个 BaseStage ,自定义的 Stage 只需要继承它, 重写 init 就好了.</p><h2 id="后处理介绍" tabindex="-1"><a class="header-anchor" href="#后处理介绍"><span>后处理介绍</span></a></h2><ol><li><p>PPMgr 会管理整个自定义的 Stage , 同时会处理一些基础功能.</p></li><li><p>PPBaseStage 是自定义 Stage 的基类.</p></li><li><p>创建 Stage , 重写 initWithStageDesc</p></li></ol><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PPThresholdStage</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PPBaseStage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_name</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;PPThresholdStage&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initWithStageDesc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mgr</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PPMgr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pl</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RenderPipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">paramTexs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;screenTex&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">outputTexName</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;tempTex&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">initWithStageDesc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mgr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>将新的 Stage 加到 PPMgr 的 StageDesc 上</li></ol><h2 id="详细实现" tabindex="-1"><a class="header-anchor" href="#详细实现"><span>详细实现</span></a></h2><p><a href="https://github.com/hugohuang1111/fxcase/tree/master/assets/caseBloom2" target="_blank" rel="noopener noreferrer">https://github.com/hugohuang1111/fxcase/tree/master/assets/caseBloom2</a></p><hr><p>转自: <a href="http://www.hugohuang.xyz/" target="_blank" rel="noopener noreferrer">HH</a></p>`,14)]))}const k=i(l,[["render",h]]),g=JSON.parse('{"path":"/posts/2021-10-07-bloom2-effect.html","title":"bloom2 辉光特效","lang":"zh-CN","frontmatter":{"title":"bloom2 辉光特效","date":"2021-10-07T00:00:00.000Z","author":"hugo","tag":["effect"],"description":"前言 之前做过一次 bloom 辉光特效, 这次国庆节把整个后处理框架调整了一下, 更容易添加后处理效果. 效果与思路 先上效果图 BloomBloom bloom 的实现就不说了, 上篇文章说过了, 这次说下这个后处理框架吧. 整个后处理的核心就是对渲染管线的调整.添加自定义的 stage . 我提供了一个 BaseStage ,自定义的 Stage...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"bloom2 辉光特效\\",\\"image\\":[\\"https://mister-hope.github.io/Blog/assets/202110/bloom2.png\\"],\\"datePublished\\":\\"2021-10-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-21T17:07:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hugo\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/posts/2021-10-07-bloom2-effect.html"}],["meta",{"property":"og:site_name","content":"HH"}],["meta",{"property":"og:title","content":"bloom2 辉光特效"}],["meta",{"property":"og:description","content":"前言 之前做过一次 bloom 辉光特效, 这次国庆节把整个后处理框架调整了一下, 更容易添加后处理效果. 效果与思路 先上效果图 BloomBloom bloom 的实现就不说了, 上篇文章说过了, 这次说下这个后处理框架吧. 整个后处理的核心就是对渲染管线的调整.添加自定义的 stage . 我提供了一个 BaseStage ,自定义的 Stage..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/Blog/assets/202110/bloom2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T17:07:42.000Z"}],["meta",{"property":"article:author","content":"hugo"}],["meta",{"property":"article:tag","content":"effect"}],["meta",{"property":"article:published_time","content":"2021-10-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T17:07:42.000Z"}]]},"git":{"createdTime":1750525662000,"updatedTime":1750525662000,"contributors":[{"name":"hugo","username":"hugo","email":"hugohuang1111@gmail.com","commits":1,"url":"https://github.com/hugo"}]},"readingTime":{"minutes":0.8,"words":240},"filePathRelative":"posts/2021-10-07-bloom2-effect.md","excerpt":"<h2>前言</h2>\\n<p>之前做过一次 bloom 辉光特效, 这次国庆节把整个后处理框架调整了一下, 更容易添加后处理效果.</p>\\n<h2>效果与思路</h2>\\n<p>先上效果图</p>\\n<figure><img src=\\"/assets/202110/bloom2.png\\" alt=\\"Bloom\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Bloom</figcaption></figure>\\n<p>bloom 的实现就不说了, 上篇文章说过了, 这次说下这个后处理框架吧.<br>\\n整个后处理的核心就是对渲染管线的调整.添加自定义的 stage . 我提供了一个 BaseStage ,自定义的 Stage 只需要继承它, 重写 init 就好了.</p>","autoDesc":true}');export{k as comp,g as data};

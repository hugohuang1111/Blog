import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-CQ2TP62M.js";const e="/Blog/assets/202108/bloom2.png",t="/Blog/assets/202108/bloom1.png",h={};function p(k,s){return l(),a("div",null,s[0]||(s[0]=[n('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>本文介绍如何实现一个全局 bloom 辉光特效</p><h2 id="效果与思路" tabindex="-1"><a class="header-anchor" href="#效果与思路"><span>效果与思路</span></a></h2><p>bloom 效果是对渲染后的纹理作处理. 一般可以这样, 先通过阀值取出来纹理中高亮的区域, 然后再对这些区域作模糊处理, 最终再将模糊区域与取阀值前的纹理合并显示.</p><p>原图:</p><figure><img src="'+e+'" alt="原图" tabindex="0" loading="lazy"><figcaption>原图</figcaption></figure><p>加上辉光效果后:</p><figure><img src="'+t+`" alt="Bloom" tabindex="0" loading="lazy"><figcaption>Bloom</figcaption></figure><h2 id="bloom-实现" tabindex="-1"><a class="header-anchor" href="#bloom-实现"><span>Bloom 实现</span></a></h2><p>主要分四步</p><ol><li>通过阀值选取高亮区域:</li></ol><div class="language-shader line-numbers-mode" data-highlighter="shiki" data-ext="shader" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shader"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vec4 frag () {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vec4 col = </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_gbuffer_albedoMap, v_uv);</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">    float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> luminace = sqrt(col.</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*col.</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.299</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + col.</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*col.</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.587</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + col.</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*col.</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.114</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    if (luminace &lt; thresholdVal) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      col = vec4(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">., </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">., </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">., </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    return CCFragOutput(col);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>将阀值后的纹理作模糊处理</li></ol><p>这里的模糊其实是分两次做的, 一次做横向, 一次做竖向</p><div class="language-shader line-numbers-mode" data-highlighter="shiki" data-ext="shader" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shader"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vec4 frag () {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vec4 col = vec4(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">., </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">., </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">., </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#if DIRECTIONX</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    col += </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_gbuffer_emissiveMap, v_uv);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    for (</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.; i &lt;= WINDOW_SIZE; i += </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      col += </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_gbuffer_emissiveMap, v_uv + vec2(i * windowStep, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      col += </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_gbuffer_emissiveMap, v_uv - vec2(i * windowStep, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    col += </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_lighting_resultMap, v_uv);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    for (</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.; i &lt;= WINDOW_SIZE; i += </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      col += </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_lighting_resultMap, v_uv + vec2(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">., i * windowStep));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      col += </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_lighting_resultMap, v_uv - vec2(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">., i * windowStep));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    col /= (WINDOW_SIZE * </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">. + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    return CCFragOutput(col);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>将模糊后的图与原图合并</li></ol><div class="language-shader line-numbers-mode" data-highlighter="shiki" data-ext="shader" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shader"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vec4 frag () {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vec4 difCol = </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_gbuffer_albedoMap, v_uv);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vec4 blurCol = </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">texture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cc_gbuffer_emissiveMap, v_uv);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vec4 col = difCol + blurCol;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    col = vec4(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.) - </span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">exp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(-col * toneExp);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    return CCFragOutput(col);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="详细实现" tabindex="-1"><a class="header-anchor" href="#详细实现"><span>详细实现</span></a></h2><p><a href="https://github.com/hugohuang1111/fxcase/tree/master/assets/caseBloom" target="_blank" rel="noopener noreferrer">https://github.com/hugohuang1111/fxcase/tree/master/assets/caseBloom</a></p><hr><p>转自: <a href="http://www.hugohuang.xyz/" target="_blank" rel="noopener noreferrer">HH</a></p>`,21)]))}const B=i(h,[["render",p]]),o=JSON.parse('{"path":"/posts/2021-08-28-bloom-effect.html","title":"bloom 辉光特效","lang":"zh-CN","frontmatter":{"title":"bloom 辉光特效","date":"2021-08-28T00:00:00.000Z","author":"hugo","tag":["effect"],"description":"简介 本文介绍如何实现一个全局 bloom 辉光特效 效果与思路 bloom 效果是对渲染后的纹理作处理. 一般可以这样, 先通过阀值取出来纹理中高亮的区域, 然后再对这些区域作模糊处理, 最终再将模糊区域与取阀值前的纹理合并显示. 原图: 原图原图 加上辉光效果后: BloomBloom Bloom 实现 主要分四步 通过阀值选取高亮区域: 将阀值后...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"bloom 辉光特效\\",\\"image\\":[\\"https://mister-hope.github.io/Blog/assets/202108/bloom2.png\\",\\"https://mister-hope.github.io/Blog/assets/202108/bloom1.png\\"],\\"datePublished\\":\\"2021-08-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-21T17:07:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hugo\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/posts/2021-08-28-bloom-effect.html"}],["meta",{"property":"og:site_name","content":"HH"}],["meta",{"property":"og:title","content":"bloom 辉光特效"}],["meta",{"property":"og:description","content":"简介 本文介绍如何实现一个全局 bloom 辉光特效 效果与思路 bloom 效果是对渲染后的纹理作处理. 一般可以这样, 先通过阀值取出来纹理中高亮的区域, 然后再对这些区域作模糊处理, 最终再将模糊区域与取阀值前的纹理合并显示. 原图: 原图原图 加上辉光效果后: BloomBloom Bloom 实现 主要分四步 通过阀值选取高亮区域: 将阀值后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/Blog/assets/202108/bloom2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T17:07:42.000Z"}],["meta",{"property":"article:author","content":"hugo"}],["meta",{"property":"article:tag","content":"effect"}],["meta",{"property":"article:published_time","content":"2021-08-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T17:07:42.000Z"}]]},"git":{"createdTime":1750525662000,"updatedTime":1750525662000,"contributors":[{"name":"hugo","username":"hugo","email":"hugohuang1111@gmail.com","commits":1,"url":"https://github.com/hugo"}]},"readingTime":{"minutes":1.12,"words":337},"filePathRelative":"posts/2021-08-28-bloom-effect.md","excerpt":"<h2>简介</h2>\\n<p>本文介绍如何实现一个全局 bloom 辉光特效</p>\\n<h2>效果与思路</h2>\\n<p>bloom 效果是对渲染后的纹理作处理. 一般可以这样, 先通过阀值取出来纹理中高亮的区域, 然后再对这些区域作模糊处理, 最终再将模糊区域与取阀值前的纹理合并显示.</p>\\n<p>原图:</p>\\n<figure><img src=\\"/assets/202108/bloom2.png\\" alt=\\"原图\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>原图</figcaption></figure>\\n<p>加上辉光效果后:</p>\\n<figure><img src=\\"/assets/202108/bloom1.png\\" alt=\\"Bloom\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>Bloom</figcaption></figure>","autoDesc":true}');export{B as comp,o as data};

import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-CQ2TP62M.js";const t={};function e(h,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>这里主要是介绍分析 Creator 3.x 的启动流程, 以及如何可以优化加载时间.</p><h2 id="启动加载流程" tabindex="-1"><a class="header-anchor" href="#启动加载流程"><span>启动加载流程</span></a></h2><p>CocosCreator 3.x 上从应用启动到进入场景的可以分为以下几个阶段</p><ol><li><p>点击启动后到游戏 js 第一行代码<br> 这里主要是对 Android/iOS 平台来说, Android/iOS 在这一阶段会加载 so 库/或 app 原生代码, 创建系统 UI, OpenGl View</p><p>这里可以做的优化一般是用 Android/iOS 的 splash (本质就是加一个图片, 让用户不会看到黑屏)</p></li><li><p>js 加载引擎需要前置模块<br> 这里已经进入到游戏中的 JS 代码了(从这里到第一个场景的显示的最终展示, 其实都是在做各种各样的前置准备工作.), 然后加载引擎中所需要的各种各样的模块. 从调试来看最影响加载时间的就是 ammo.js 这个库的加载.</p><p>所以这里可以做的优化是, 去掉不需要的模块, 在 Creator 的工程设置上就可以选择你要裁剪的模块. 如果你的游戏没有用到物理库, 把 ammo.js 去掉.</p></li><li><p>js 中加载配置, 必须的场景<br> 这里是在加载主要场景, 资源, 配置信息, 这里主要影响就是必须的场景的大小了, 一般情况下就是第一个场景</p><p>这里可以做的优先一般减少你的场景大小, 场景中的内容是否可以做成动态的.</p></li><li><p>logo 展示<br> 这里是 logo 展示界面(默认是 creator 的 logo), 默认为 3 秒, 在这里的后台其实还会做 shader 的编译工作.</p><p>这里可以做的优化是把 logo 展示时间改小, 个人建议不要直接改为 0, 因为还要留点时间去编译 shader, 同时也可以去掉一些你不会用到的 shader . 比如如果是2D游戏, 可以去掉一些3D相关的 shader.</p></li><li><p>显示游戏中的第一个场景<br> 这里就进入到开发者的第一个场景了, 就要根据项目需要做项目相关的优化了.</p></li></ol><h2 id="具体优化手法" tabindex="-1"><a class="header-anchor" href="#具体优化手法"><span>具体优化手法</span></a></h2><ol><li><p>splash 的设置</p><ul><li>在 ios 上是可以直接设置启动图片的</li><li>在 android 上可以通过设置主题来解决, 这里有两个文档可以参考<a href="https://www.jianshu.com/p/cea2864bb587" target="_blank" rel="noopener noreferrer">Android启动界面</a>, <a href="https://forum.cocos.org/t/cocos-creator-android-2/83154" target="_blank" rel="noopener noreferrer">Creator2上的Android启动</a> (这个里面中对他说的第一阶段所做的操作就是使用了 splash )</li></ul></li><li><p>裁剪引擎模块</p><ul><li>Creator -&gt; Menu(菜单) -&gt; Project(工程) -&gt; Project Settings(工程设置) -&gt; Feature Crop(模块设置)</li></ul></li><li><p>优化场景大小</p><ul><li>优化场景大小, 这里主要与项目本身相关了, 可以做一些, 比如场景的一些内容动态之类</li></ul></li><li><p>logo 展示</p><ul><li>调整 logo 时间可以直接修改生成后工程中的 <code>assets/src/settings.json</code> (微信小游戏平台为 <code>src/settings.json</code> ) . 找到其中的 splashScreen.totalTime 项, 修改为 1000 毫秒. (当然可以为其它值, 看项目需要)</li><li>去掉一些不用的 shader 的编译, 这一项一般可能不需要. 这里提供一种 hack 方法.<br> 在生成后工程的 application.js 中, 添加如下代码:<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加的代码段开始 接管 createShader , 不需要的 shader , 直接跳过编译</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> originCreateShader</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> cc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">game</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">_gfxDevice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">createShader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">game</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">_gfxDevice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> skipShader</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;deferred-lighting|lighting-vs|lighting-fs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;post-process|post-process-vs|post-process-fs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;standard|shadow-caster-vs:vert|shadow-caster-fs:frag&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;unlit|unlit-vs:vert|unlit-fs:frag&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;clear-stencil|sprite-vs:vert|sprite-fs:frag&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;particle|particle-vs-legacy:lpvs_main|tinted-fs:add&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;particle-gpu|particle-vs-gpu:gpvs_main|tinted-fs:add&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;particle-trail|particle-trail:vs_main|tinted-fs:add&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;billboard|vert:vs_main|tinted-fs:add&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;spine|sprite-vs:vert|sprite-fs:frag&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">game</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">_gfxDevice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createShader</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">shaderInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">shaderInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> skipShader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">skipShader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> shaderInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> originCreateShader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">shaderInfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加的代码段结束</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> cc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">game</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    dt</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;LT, Game toonGameStarted:&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timestamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onGameStarted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">cc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">settings</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><hr><p>转自: <a href="http://www.hugohuang.xyz/" target="_blank" rel="noopener noreferrer">HH</a></p>`,9)]))}const k=i(t,[["render",e]]),d=JSON.parse('{"path":"/posts/2021-06-24-creator3_launch_slow.html","title":"Creator3 启动加载慢分析与解决","lang":"zh-CN","frontmatter":{"title":"Creator3 启动加载慢分析与解决","date":"2021-06-24T00:00:00.000Z","author":"hugo","tag":["creator","android","ios","weixin"],"description":"前言 这里主要是介绍分析 Creator 3.x 的启动流程, 以及如何可以优化加载时间. 启动加载流程 CocosCreator 3.x 上从应用启动到进入场景的可以分为以下几个阶段 点击启动后到游戏 js 第一行代码 这里主要是对 Android/iOS 平台来说, Android/iOS 在这一阶段会加载 so 库/或 app 原生代码, 创建系...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Creator3 启动加载慢分析与解决\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-21T17:07:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hugo\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/posts/2021-06-24-creator3_launch_slow.html"}],["meta",{"property":"og:site_name","content":"HH"}],["meta",{"property":"og:title","content":"Creator3 启动加载慢分析与解决"}],["meta",{"property":"og:description","content":"前言 这里主要是介绍分析 Creator 3.x 的启动流程, 以及如何可以优化加载时间. 启动加载流程 CocosCreator 3.x 上从应用启动到进入场景的可以分为以下几个阶段 点击启动后到游戏 js 第一行代码 这里主要是对 Android/iOS 平台来说, Android/iOS 在这一阶段会加载 so 库/或 app 原生代码, 创建系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T17:07:42.000Z"}],["meta",{"property":"article:author","content":"hugo"}],["meta",{"property":"article:tag","content":"weixin"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"creator"}],["meta",{"property":"article:published_time","content":"2021-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T17:07:42.000Z"}]]},"git":{"createdTime":1750525662000,"updatedTime":1750525662000,"contributors":[{"name":"hugo","username":"hugo","email":"hugohuang1111@gmail.com","commits":1,"url":"https://github.com/hugo"}]},"readingTime":{"minutes":3.38,"words":1013},"filePathRelative":"posts/2021-06-24-creator3_launch_slow.md","excerpt":"<h2>前言</h2>\\n<p>这里主要是介绍分析 Creator 3.x 的启动流程, 以及如何可以优化加载时间.</p>\\n<h2>启动加载流程</h2>\\n<p>CocosCreator 3.x 上从应用启动到进入场景的可以分为以下几个阶段</p>\\n<ol>\\n<li>\\n<p>点击启动后到游戏 js 第一行代码<br>\\n这里主要是对 Android/iOS 平台来说, Android/iOS 在这一阶段会加载 so 库/或 app 原生代码, 创建系统 UI, OpenGl View</p>\\n<p>这里可以做的优化一般是用 Android/iOS 的 splash (本质就是加一个图片, 让用户不会看到黑屏)</p>\\n</li>\\n<li>\\n<p>js 加载引擎需要前置模块<br>\\n这里已经进入到游戏中的 JS 代码了(从这里到第一个场景的显示的最终展示, 其实都是在做各种各样的前置准备工作.), 然后加载引擎中所需要的各种各样的模块. 从调试来看最影响加载时间的就是 ammo.js 这个库的加载.</p>\\n<p>所以这里可以做的优化是, 去掉不需要的模块, 在 Creator 的工程设置上就可以选择你要裁剪的模块. 如果你的游戏没有用到物理库, 把 ammo.js 去掉.</p>\\n</li>\\n<li>\\n<p>js 中加载配置, 必须的场景<br>\\n这里是在加载主要场景, 资源, 配置信息, 这里主要影响就是必须的场景的大小了, 一般情况下就是第一个场景</p>\\n<p>这里可以做的优先一般减少你的场景大小, 场景中的内容是否可以做成动态的.</p>\\n</li>\\n<li>\\n<p>logo 展示<br>\\n这里是 logo 展示界面(默认是 creator 的 logo), 默认为 3 秒, 在这里的后台其实还会做 shader 的编译工作.</p>\\n<p>这里可以做的优化是把 logo 展示时间改小, 个人建议不要直接改为 0, 因为还要留点时间去编译 shader, 同时也可以去掉一些你不会用到的 shader . 比如如果是2D游戏, 可以去掉一些3D相关的 shader.</p>\\n</li>\\n<li>\\n<p>显示游戏中的第一个场景<br>\\n这里就进入到开发者的第一个场景了, 就要根据项目需要做项目相关的优化了.</p>\\n</li>\\n</ol>","autoDesc":true}');export{k as comp,d as data};
